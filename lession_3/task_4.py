"""
4. * (вместо задачи 3) Написать функцию thesaurus_adv(), принимающую в качестве аргументов строки в
формате «Имя Фамилия» и возвращающую словарь, в котором ключи — первые буквы фамилий, а значения — словари,
реализованные по схеме предыдущего задания и содержащие записи, в которых фамилия начинается с соответствующей буквы.
Например:
 thesaurus_adv("Иван Сергеев", "Инна Серова", "Петр Алексеев", "Илья Иванов", "Анна Савельева")
{
    "А": {
        "П": "Петр Алексеев"
    },
    "С": {
        "И": ["Иван Сергеев", "Инна Серова"],
        "А": ["Анна Савельева"]
    }
}
Сможете ли вы вернуть отсортированный по ключам словарь?
"""

origin_names = ("Иван Сергеев", "Инна Серова", "Петр Алексеев", "Илья Иванов", "Анна Савельева", 'Джордж Вашингтон',
                'Пол Верховен')


def thesaurus_adv(names):
    # Разбиваем имя и фамилию по кортежам для удобства поиска первой буквы фамилии
    split_names = []
    for name in names:
        split_names.append(name.split(' '))
    name_dict = {}
    # перебираем каждое имя в списке
    for name in split_names:
        temp_list = [name]
        char = name[1][0]
        # сравниваем первую букву выбранного имени со всеми именами в списке. Если совпадает, группируем
        for i in range(len(split_names)):
            if split_names[i][1][0] == char and split_names[i] not in temp_list:
                temp_list.append(split_names[i])
        # объединяем фамилию и имя
        for j in range(len(temp_list)):
            temp_list[j] = ' '.join(temp_list[j])
        # после группировки заносим в словарь ключ Буква фамилии: значение Список имен
        name_dict.update({char: temp_list})
    # Сортируем словарь по ключам по алфавиту
    sorted_dict = {}
    sorted_keys = sorted(name_dict)
    for i in sorted_keys:
        sorted_dict[i] = name_dict[i]
    return sorted_dict


print(thesaurus_adv(origin_names))


